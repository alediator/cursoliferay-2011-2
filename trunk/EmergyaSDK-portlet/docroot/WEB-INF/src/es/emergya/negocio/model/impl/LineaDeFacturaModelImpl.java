/**
 * Copyright (c) 2000-2010 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.emergya.negocio.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import es.emergya.negocio.model.LineaDeFactura;
import es.emergya.negocio.model.LineaDeFacturaModel;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

/**
 * The base model implementation for the LineaDeFactura service. Represents a row in the &quot;lineaDeFactura&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link es.emergya.negocio.model.LineaDeFacturaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LineaDeFacturaImpl}.
 * </p>
 *
 * <p>
 * Never modify or reference this class directly. All methods that expect a linea de factura model instance should use the {@link es.emergya.negocio.model.LineaDeFactura} interface instead.
 * </p>
 *
 * @author adiaz
 * @see LineaDeFacturaImpl
 * @see es.emergya.negocio.model.LineaDeFactura
 * @see es.emergya.negocio.model.LineaDeFacturaModel
 * @generated
 */
public class LineaDeFacturaModelImpl extends BaseModelImpl<LineaDeFactura>
	implements LineaDeFacturaModel {
	public static final String TABLE_NAME = "lineaDeFactura";
	public static final Object[][] TABLE_COLUMNS = {
			{ "lineaDeacturaId", new Integer(Types.BIGINT) },
			{ "detalle", new Integer(Types.VARCHAR) },
			{ "importe", new Integer(Types.DOUBLE) },
			{ "facturaId", new Integer(Types.BIGINT) }
		};
	public static final String TABLE_SQL_CREATE = "create table lineaDeFactura (lineaDeacturaId LONG not null primary key,detalle VARCHAR(75) null,importe DOUBLE,facturaId LONG)";
	public static final String TABLE_SQL_DROP = "drop table lineaDeFactura";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.es.emergya.negocio.model.LineaDeFactura"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.es.emergya.negocio.model.LineaDeFactura"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.es.emergya.negocio.model.LineaDeFactura"));

	public LineaDeFacturaModelImpl() {
	}

	public long getPrimaryKey() {
		return _lineaDeacturaId;
	}

	public void setPrimaryKey(long pk) {
		setLineaDeacturaId(pk);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_lineaDeacturaId);
	}

	public long getLineaDeacturaId() {
		return _lineaDeacturaId;
	}

	public void setLineaDeacturaId(long lineaDeacturaId) {
		_lineaDeacturaId = lineaDeacturaId;
	}

	public String getDetalle() {
		if (_detalle == null) {
			return StringPool.BLANK;
		}
		else {
			return _detalle;
		}
	}

	public void setDetalle(String detalle) {
		_detalle = detalle;
	}

	public double getImporte() {
		return _importe;
	}

	public void setImporte(double importe) {
		_importe = importe;
	}

	public long getFacturaId() {
		return _facturaId;
	}

	public void setFacturaId(long facturaId) {
		_facturaId = facturaId;
	}

	public LineaDeFactura toEscapedModel() {
		if (isEscapedModel()) {
			return (LineaDeFactura)this;
		}
		else {
			return (LineaDeFactura)Proxy.newProxyInstance(LineaDeFactura.class.getClassLoader(),
				new Class[] { LineaDeFactura.class },
				new AutoEscapeBeanHandler(this));
		}
	}

	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					LineaDeFactura.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	public Object clone() {
		LineaDeFacturaImpl lineaDeFacturaImpl = new LineaDeFacturaImpl();

		lineaDeFacturaImpl.setLineaDeacturaId(getLineaDeacturaId());

		lineaDeFacturaImpl.setDetalle(getDetalle());

		lineaDeFacturaImpl.setImporte(getImporte());

		lineaDeFacturaImpl.setFacturaId(getFacturaId());

		return lineaDeFacturaImpl;
	}

	public int compareTo(LineaDeFactura lineaDeFactura) {
		long pk = lineaDeFactura.getPrimaryKey();

		if (getPrimaryKey() < pk) {
			return -1;
		}
		else if (getPrimaryKey() > pk) {
			return 1;
		}
		else {
			return 0;
		}
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		LineaDeFactura lineaDeFactura = null;

		try {
			lineaDeFactura = (LineaDeFactura)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long pk = lineaDeFactura.getPrimaryKey();

		if (getPrimaryKey() == pk) {
			return true;
		}
		else {
			return false;
		}
	}

	public int hashCode() {
		return (int)getPrimaryKey();
	}

	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{lineaDeacturaId=");
		sb.append(getLineaDeacturaId());
		sb.append(", detalle=");
		sb.append(getDetalle());
		sb.append(", importe=");
		sb.append(getImporte());
		sb.append(", facturaId=");
		sb.append(getFacturaId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("es.emergya.negocio.model.LineaDeFactura");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lineaDeacturaId</column-name><column-value><![CDATA[");
		sb.append(getLineaDeacturaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>detalle</column-name><column-value><![CDATA[");
		sb.append(getDetalle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>importe</column-name><column-value><![CDATA[");
		sb.append(getImporte());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>facturaId</column-name><column-value><![CDATA[");
		sb.append(getFacturaId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private long _lineaDeacturaId;
	private String _detalle;
	private double _importe;
	private long _facturaId;
	private transient ExpandoBridge _expandoBridge;
}